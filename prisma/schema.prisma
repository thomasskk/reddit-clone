generator client {
        provider = "prisma-client-js"
}

datasource db {
        provider = "postgresql"
        url      = env("DATABASE_URL")
}

model User {
        id                   String           @id @default(cuid())
        email                String           @unique
        emailVerified        DateTime?        @map("email_verified")
        image                String?
        username             String           @unique @db.VarChar(50)
        passwordHash         String           @map("password_hash")
        phoneNumber          String?          @unique @map("phone_number") @db.VarChar(20)
        phoneNumberConfirmed Boolean          @default(false) @map("phone_number_confirmed")
        twoFactorEnabled     Boolean          @default(false) @map("two_factor_enabled")
        accessFailedCount    Int              @default(0) @map("access_failed_count")
        registrationDate     DateTime         @default(now())
        lastLoginFromIp      String           @map("last_login_from_ip") @db.VarChar(20)
        lastLoginDate        DateTime         @default(now()) @map("last_login_date")
        notifications        Notification[]
        Comment              Comment[]
        UserSub              UserSub[]
        Sub                  Sub[]
        Post                 Post[]
        UserPreference       UserPreference[]

        @@map("users")
}

model UserPreference {
        id                     String  @id @default(cuid())
        userId                 String  @unique @map("user_id")
        user                   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
        lang                   String  @db.VarChar(2)
        showPresence           Boolean @default(true) @map("show_presence")
        videoAutoplay          Boolean @default(false) @map("video_autoplay")
        countryCode            String  @db.VarChar(2)
        collapseLeftBar        Boolean @default(false) @map("collapse_left_bar")
        labelNsfw              Boolean @default(false) @map("label_nsfw")
        badCommentAutoCollapse Boolean @default(false) @map("bad_comment_auto_collapse")
        nightMode              Boolean @default(false) @map("nigth_mode")
        searchIncludeNsfw      Boolean @default(false) @map("search_include_nsfw")
        highligthNewComments   Boolean @default(true) @map("highligth_new_comments")

        @@map("user_preferences")
}

model UserSub {
        id          String  @id @default(cuid())
        userId      String  @unique @map("user_id")
        user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
        subId       String  @unique @map("sub_name")
        sub         Sub     @relation(fields: [subId], references: [id])
        isModerator Boolean @default(false) @map("is_moderator")
        isFavorite  Boolean @default(false) @map("is_favorite")

        @@map("user_subs")
}

model Comment {
        id                   String             @id @default(cuid())
        username             String             @db.VarChar(50)
        userId               String             @unique @map("user_id")
        user                 User               @relation(fields: [userId], references: [id])
        parentId             Int                @unique @map("parent_id")
        content              String             @db.VarChar
        creationDate         DateTime           @default(now()) @map("creation_date")
        lastEditDate         DateTime           @default(now()) @map("last_edit_date")
        upCount              Int                @map("up_count")
        downCount            Int                @map("down_count")
        isDeleted            Int?               @map("is_deleted")
        post                 Post               @relation(fields: [postId], references: [id])
        postId               String             @unique @map("post_id")
        commentVoteTracker   CommentVoteTracker @relation(fields: [commentVoteTrackerId], references: [id])
        commentVoteTrackerId String             @unique @map("comment_vote_tracker_id")

        @@map("comments")
}

model CommentVoteTracker {
        id           String   @id @default(cuid())
        username     String   @db.VarChar(50)
        voteStatus   Int      @map("vote_status")
        creationDate DateTime @default(now()) @map("creation_date")
        ipAddress    String?  @map("ip_address") @db.VarChar(90)
        voteValue    Float    @map("vote_value")
        comment      Comment?

        @@map("comment_vote_trackers")
}

model Notification {
        id                  String                @id @default(cuid())
        title               String                @db.VarChar(100)
        content             String                @db.VarChar(100)
        url                 String                @db.VarChar(500)
        sentAtDate          DateTime?             @map("sent_at_date")
        readAtDate          DateTime?             @map("read_at_date")
        viewedAtDate        DateTime?             @map("viewed_at_date")
        avatarUrl           String                @map("avatar_url") @db.VarChar(500)
        user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
        userId              String                @unique @map("user_id")
        notificationContext NotificationContext[]

        @@map("notifications")
}

model NotificationContext {
        id             String       @id @default(cuid())
        notificationId String       @map("notification_id")
        notification   Notification @relation(fields: [notificationId], references: [id])

        @@map("notification_contexts")
}

model Sub {
        id               String    @id @default(cuid())
        name             String    @unique @db.VarChar(20)
        title            String    @db.VarChar(100)
        description      String    @db.VarChar(500)
        creationDate     DateTime  @default(now()) @map("creation_date")
        isPrivate        Boolean   @map("is_private")
        isAuthorizedOnly Boolean   @map("is_authorized_only")
        lastPostDate     DateTime  @default(now()) @map("last_post_date")
        thumbnailUrl     String    @map("thumbnail_url") @db.VarChar(500)
        colorTheme       String    @map("color_theme") @db.VarChar(20)
        user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
        userId           String    @unique @map("user_id")
        lastUpdateDate   DateTime  @default(now()) @map("last_update_date")
        post             Post[]
        memberCount      Int       @default(0) @map("member_count")
        UserSub          UserSub[]

        @@index([name])
        @@map("subs")
}

enum PostType {
        TEXT
        IMAGE
        VIDEO
        AUDIO
        LINK
}

model Post {
        id              String            @id @default(cuid())
        user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
        userId          String            @unique @map("user_id")
        content         String?           @db.VarChar
        creationDate    DateTime          @default(now()) @map("creation_date")
        lastEditDate    DateTime?         @default(now()) @map("last_edit_date")
        subId           String            @unique @map("sub_id")
        sub             Sub               @relation(fields: [subId], references: [id])
        type            PostType
        title           String            @db.VarChar(200)
        upCount         Int               @default(0) @map("up_count")
        downCount       Int               @default(0) @map("down_count")
        thumbail        String?           @db.VarChar(150)
        flairLabel      String?           @map("flair_label") @db.VarChar(50)
        views           Float             @default(0)
        isDeleted       Boolean           @default(false) @map("is_deleted")
        url             String?           @db.VarChar(3000)
        comment         Comment[]
        PostVoteTracker PostVoteTracker[]

        @@map("posts")
}

model PostVoteTracker {
        id           String   @id @default(cuid())
        username     String   @db.VarChar(50)
        voteStatus   Int      @map("vote_status")
        creationDate DateTime @default(now()) @map("creation_date")
        ipAddress    String?  @map("ip_address") @db.VarChar(90)
        voteValue    Float    @map("vote_value")
        post         Post     @relation(fields: [postId], references: [id])
        postId       String   @unique @map("post_id")

        @@map("post_vote_trackers")
}
